#include<iostream>
#include<memory>

using namespace std;
#define MAX 26

class TrieNode{
    public:
    shared_ptr<TrieNode>children[MAX];
    bool isWord;
    TrieNode()
    {
        //cout<<"trienode constructure called"<<endl;
        for(int i=0;i<MAX;i++)
        {
        	children[i]=shared_ptr<TrieNode>();
        }
        isWord=false;
    }
};

class interface
{
public:
    interface(){}
    ~interface(){}
    virtual void insertWord(string&)=0;
    virtual bool deleteWord(string&)=0;
    virtual bool isEmptyNode(shared_ptr<TrieNode>) const =0;
};

class Trie:public interface
{
	shared_ptr<TrieNode>root;
    int Total_words;
public:
    Trie()
    {
        root=shared_ptr<TrieNode>(new TrieNode());
        Total_words=0;
    }
    ~Trie()
    {

    }
    int i2c(char c)
    {
        return static_cast<int>(c-'a');
    }
    void insertWord(string& trieString)
    {
        shared_ptr<TrieNode>current=root;
        int i=0;
        for(i=0;i<trieString.size();i++)
        {
            if(current->children[i2c(trieString[i])]==shared_ptr<TrieNode>(nullptr))
            {
                //cout<<trieString[i];
                current->children[i2c(trieString[i])]=shared_ptr<TrieNode>(new TrieNode());
            }
            current=(current->children[i2c(trieString[i])]);
        }
        current->isWord=true;
    }

    bool searchWord(string & trieString)
    {
        shared_ptr<TrieNode>current=root;
        for(int i=0;i<trieString.size();i++)
        {
            if(current->children[i2c(trieString[i])]==shared_ptr<TrieNode>(nullptr))
                return false;
            current=current->children[i2c(trieString[i])];
        }
        if(current->isWord==true)
        return true;

        return false;
    }

    void Partdelete(string& trieString,shared_ptr<TrieNode>&checkout)
    {
        if(checkout==nullptr)return;
        if(trieString.size()==0){checkout->isWord=false;return;}
        string akp=trieString.substr(1);
        Partdelete(akp,checkout->children[i2c(trieString[0])]);
        if(checkout!=nullptr){
            if(isEmptyNode(checkout->children[i2c(trieString[0])]))
            {
                checkout->children[i2c(trieString[0])].reset();
                checkout->children[i2c(trieString[0])]=nullptr;
            }
            else return;
        }
    }

    bool deleteWord(string & trieString)
    {
        if(!searchWord(trieString))return false;
        Partdelete(trieString,root);
        return true;
    }

    bool isEmptyNode(shared_ptr<TrieNode>check) const
    {
        for(int i=0;i<MAX;i++)
        {
            if(check->children[i])
                return false;

            cout<<i<<endl;
        }
        return true;
    }
};
