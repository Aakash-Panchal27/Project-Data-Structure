//Trie

class TrieNode{
    public:
    shared_ptr<TrieNode>children[26];
    bool isWord;
    int prefixWords;
    TrieNode()
    {
        for(int i=0;i<26;i++)
        {
            children[i]=shared_ptr<TrieNode>();
        }
        isWord=false;
        prefixWords=0;
    }
};

class Trie
{
    shared_ptr<TrieNode>root;
    int Total_words;
public:
    Trie()
    {
        root=shared_ptr<TrieNode>(new TrieNode());
        Total_words=0;
    }

    ~Trie()
    {

    }

    int i2c(char c)
    {
        return static_cast<int>(c-'a');
    }

    void insertWord(string& trieString)
    {
        shared_ptr<TrieNode>current=root;
        int i=0;
        for(i=0;i<trieString.size();i++)
        {
            if(current->children[i2c(trieString[i])]==shared_ptr<TrieNode>(nullptr))
            {
                //cout<<trieString[i];
                current->children[i2c(trieString[i])]=shared_ptr<TrieNode>(new TrieNode());
            }
            current=(current->children[i2c(trieString[i])]);
            ++(current->prefixWords);
            if(i==0)root->prefixWords++;
        }
        current->isWord=true;
    }

    int searchWord(string & trieString)
    {
        shared_ptr<TrieNode>current=root;
        for(int i=0;i<trieString.size();i++)
        {
            //cout<<trieString[i];
            if(current->children[i2c(trieString[i])]==shared_ptr<TrieNode>(nullptr))
                return 0;
            current=current->children[i2c(trieString[i])];
        }
        return current->prefixWords;
    }
};
