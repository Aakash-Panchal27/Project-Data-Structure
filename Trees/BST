//I am working over it.
#include<iostream>

template<typename T>
struct Node{
public:
  Node*left;
  Node*right;
  Node*parent;
  T val;
  Node(T data)
  {
    left=nullptr;
    right=nullptr;
    parent=nullptr;
    val=data;
  }

  Node(){
    left=nullptr;
    right=nullptr;
    parent=nullptr;
  }
}

template<typename T>
void insert(Node*root,T data)
{
  Node*y=nullptr;
  while(root)
  {
    y=root;
    if(root->val<=data)root=root->left;
    else root=root->right;
  }
  Node*newnode=new Node(data);
  newnode.parent=y;
  if(y==nullptr){
    root=newnode;
  }
  else if(newnode.key<y.key){
    y.left=newnode;
  }
  else y.right=newnode;
}



template<typename T>
void delete(Node*root,T data)
{
  
}

template<typename T>
Node* successor(Node *root){
  if(root->right!=nullptr)
  return minimum(root->right);
  Node*y=root->parent;
  while(y!=nullptr && root== y->right){
    root=y;
    y=y->parent;
  }
  return y;
}

Node* predecessor(Node*root){
  if(root->left!=nullptr){
    return maximum(root->left);
  }
  Node*y=root->parent;
  while(y!=nullptr && root== y->left){
    root=y;
    y=y->parent;
  }
  return y;
}

Node*search(Node*root,T data){
  if(x==nullptr || data==root->val)return x;
  if(root->val<=data)
  return search(root->left,data);
  else return search(root->right,data);
}

Node* minimum(Node*root)
{
  while(root->left!=nullptr)root=root->left;
  return root;
}

Node*maximum(Node*root)
{
  while(root->right!=nullptr)root=root->right;
  return root;
}

int main()
{

}
